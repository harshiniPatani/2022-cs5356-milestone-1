<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/head') %>
</head>

<body>
  <header>
    <%- include('../partials/nav', { hideSignIn: true }) %>
  </header>


  <form id="login-form">
    <input type="text" name="login" placeholder="Your user name" />
    <input type="password" name="password" id="password" />
    <button>
      Sign In
    </button>
    <div id="login-error">

    </div>
    </div>
  </form>
</body>
<script src="https://www.gstatic.com/firebasejs/9.6.4/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.4/firebase-auth-compat.js"></script>

<script>

  window.onload = () => {
    const firebaseConfig = {
      // CS5356 TODO #2
      // Create your own Firebase project. See the assignment for
      // where you can get the Firebase config
      apiKey: "AIzaSyCulAH7TQjwwC7-9Km43V-x0_OfAqmVTp0",
      authDomain: "pawpics-cs5356.firebaseapp.com",
      projectId: "pawpics-cs5356",
      storageBucket: "pawpics-cs5356.appspot.com",
      messagingSenderId: "712709984604",
      appId: "1:712709984604:web:b2e8dbd36488a2b28ff199",
      measurementId: "G-ZESS6540LN"
    };

    const app = firebase.initializeApp(firebaseConfig);

    app.auth().setPersistence(firebase.auth.Auth.Persistence.NONE);

    document
      .getElementById("login-form")
      .addEventListener("submit", (event) => {
        event.preventDefault();
        const login = event.target.login.value;
        const password = event.target.password.value;

        // CS5356 TODO #3
        // Sign in using the Firebase SDK for Web
        // Get the users ID token
        // Start a new session with the users ID token
        // Redirect the user to the /dashboard
        // As httpOnly cookies are to be used, do not persist any state client side.  
        // When the user signs in with email and password.
        firebase.auth().signInWithEmailAndPassword(login,password)
        .then(async (userCredential) => {
              // Signed in
              // Get the users ID token
              const user = userCredential.user;
              const idToken = await user.getIdToken();
              // Start a new session with the users ID token
              await fetch('/sessionLogin', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ idToken })
              })
              .then(() => {
                console.log('POST sent')
                // Redirect the user to the /dashboard
                window.location.href = '/dashboard'
              });
            })
            .catch((error) => {
              let errorCode = error.code;
              let errorMessage = error.message;
            });       
        
        // .then(user => {
        //       fetch('/sessionLogin', {
        //       method: 'POST',
        //       body: JSON.stringify({ idToken: idToken }) // add the users ID token here
        //     }).then(() => { window.location.href = '/dashboard' });
        //   });
        // }).then((res) => {
        //     res.redirect('/dashboard')
        //     if (res.status==200) { 
        //       window.location.assign('/dashboard');
        //       console.log('Session started!'); 
        //     }
        //     else {
        //       console.log('Failed to start session.')
        //       alert('Internal Server Error')
        //     }
        // });

        return false;
      });
    };
</script>
</html>